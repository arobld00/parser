
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import java.util.Iterator;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\002\016\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\003\003\000\002\003\003" +
    "\000\002\007\005\000\002\007\003\000\002\007\003\000" +
    "\002\010\002\000\002\004\006\000\002\004\003\000\002" +
    "\004\003\000\002\005\004\000\002\005\003\000\002\011" +
    "\002\000\002\006\016\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\054\000\006\003\004\013\006\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\056\001\002\000\004\007\007" +
    "\001\002\000\006\003\011\006\012\001\002\000\004\010" +
    "\015\001\002\000\004\010\ufffc\001\002\000\006\010\ufffd" +
    "\011\013\001\002\000\006\003\011\006\012\001\002\000" +
    "\004\010\ufffe\001\002\000\004\014\016\001\002\000\004" +
    "\007\017\001\002\000\006\003\020\005\021\001\002\000" +
    "\004\010\ufff5\001\002\000\006\010\ufff6\011\ufff8\001\002" +
    "\000\004\010\023\001\002\000\004\015\024\001\002\000" +
    "\004\007\025\001\002\000\006\003\030\016\027\001\002" +
    "\000\004\010\052\001\002\000\004\007\033\001\002\000" +
    "\010\003\ufff0\010\ufff0\016\ufff0\001\002\000\010\003\030" +
    "\010\ufff3\016\027\001\002\000\004\010\ufff4\001\002\000" +
    "\004\005\034\001\002\000\004\012\035\001\002\000\006" +
    "\003\036\006\040\001\002\000\004\012\ufff9\001\002\000" +
    "\004\012\043\001\002\000\006\011\041\012\ufffa\001\002" +
    "\000\006\003\036\006\040\001\002\000\004\012\ufffb\001" +
    "\002\000\004\005\044\001\002\000\004\012\ufff2\001\002" +
    "\000\004\012\046\001\002\000\004\004\047\001\002\000" +
    "\004\012\050\001\002\000\004\010\051\001\002\000\010" +
    "\003\ufff1\010\ufff1\016\ufff1\001\002\000\004\002\001\001" +
    "\002\000\004\011\054\001\002\000\006\003\020\005\021" +
    "\001\002\000\004\010\ufff7\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\054\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\021\001\001\000\002\001" +
    "\001\000\004\010\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\025\006\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\031\006\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\054\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public void report_error(String message, Object info) {
    System.err.println (message);
}

public void syntax_error(Symbol s){
    report_error("Error de sintaxis en linea "+(s.left+1)+", caracter "+(s.right+1),null);
}

   


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



    public class Editorial {
        private String nombre;
        private int numLibros;

        private Editorial (String nombre,int num){
            this.nombre=nombre;
            numLibros=num;
        } 

        private  Editorial (String nombre){
            this(nombre,0);
        } 

        private int getNumLibros() {
            return numLibros;
        }

        private void setNumLibros(int num){
            numLibros=num;
        }

        private String getNombre() {
            return nombre;
        }
    }

    List<String> listaAutores = new ArrayList();
    List<Editorial> listaEditoriales = new ArrayList();

    public void addAutor(String nombre){
        if(!listaAutores.contains(nombre)){
            listaAutores.add(nombre);            
        }
        
        else {            
            parser.report_error(nombre+" ya existe en la lista de autores.",null);
        }        
    }

    public void addEditorial(String nombre){

        Editorial editorial = new Editorial(nombre);

        if(!existeEditorial(nombre)){
            listaEditoriales.add(editorial);                        
        }
        
        else {            
            parser.report_error(nombre+" ya existe en la lista de editoriales.",null);
        }        
    }

    public boolean existeEditorial(String nombre){
        Iterator<Editorial> iterador = listaEditoriales.iterator();
        while(iterador.hasNext()){
            Editorial editorial = iterador.next();
            if (editorial.getNombre().equals(nombre)){
                return true;
            }
        }
        return false;
    }

     public boolean existenAutores(String autores){
        
        String listaAutoresLibro[] = autores.split(";");
        
        for (int i=0; i<listaAutoresLibro.length-1;i++){            
            if(!listaAutores.contains(listaAutoresLibro[i].trim())){
                return false;
            }
        }
        return true;        
    }

    public void sumaLibro(String nomEditorial, String autores){
        boolean modificado = false;
        if(existeEditorial(nomEditorial)){
            if(existenAutores(autores)){
                Iterator<Editorial> iterador = listaEditoriales.iterator();
                while(iterador.hasNext() && !modificado){
                    Editorial editorial = iterador.next();
                    if (editorial.getNombre().equals(nomEditorial)){
                        editorial.setNumLibros(editorial.getNumLibros()+1);
                        modificado=true;
                    }
                }            
            }
            else {                
                parser.report_error("Libro contiene algun autor que no existe.",null);
            }
        }

        else{            
            parser.report_error("Libro contiene editorial "+nomEditorial+" y no existe.",null);
        }            
    }

    public void mostrarLibrosEditoriales(){
        Iterator<Editorial> iterador = listaEditoriales.iterator();
        while(iterador.hasNext()){
            Editorial editorial = iterador.next();
            System.out.println("Editorial: "+editorial.getNombre()+
                    " con "+editorial.getNumLibros()+" libros.");
        }
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= AUTORES LLAVEIZQ expr_autores LLAVEDER EDITORIALES LLAVEIZQ expr_editoriales LLAVEDER LIBROS LLAVEIZQ expr_libros LLAVEDER 
            {
              Object RESULT =null;
		 mostrarLibrosEditoriales(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Error en sintaxis de la estructura del fichero.",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_autores ::= NAUTOR COMA expr_autores 
            {
              Object RESULT =null;
		int nomAutorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nomAutorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nomAutor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 addAutor(nomAutor); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_autores",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr_autores ::= NAUTOR 
            {
              Object RESULT =null;
		int nomAutorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nomAutorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nomAutor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addAutor(nomAutor); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_autores",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr_autores ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Error en sintaxis en bloque de autores.",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_autores",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr_autores2 ::= NAUTOR COMA expr_autores2 
            {
              String RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int autoresleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int autoresright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String autores = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=nombre+"; "+autores; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_autores2",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr_autores2 ::= NAUTOR 
            {
              String RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=nombre+"; "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_autores2",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr_autores2 ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Error en sintaxis en bloque de autores.",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_autores2",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              Object RESULT =null;
		int nomEditorialleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nomEditorialright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nomEditorial = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 addEditorial(nomEditorial); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr_editoriales ::= NOMBRE NT$0 COMA expr_editoriales 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nomEditorialleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nomEditorialright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nomEditorial = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_editoriales",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr_editoriales ::= NOMBRE 
            {
              Object RESULT =null;
		int nomEditorialleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nomEditorialright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nomEditorial = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addEditorial(nomEditorial); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_editoriales",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr_editoriales ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Error en sintaxis de editoriales.",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_editoriales",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr_libros ::= expr_libro expr_libros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_libros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr_libros ::= expr_libro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_libros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$1 ::= 
            {
              Object RESULT =null;
		int autoresleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int autoresright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String autores = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int editorialleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int editorialright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String editorial = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 sumaLibro(editorial,autores);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr_libro ::= LIBRO LLAVEIZQ NOMBRE PYC expr_autores2 PYC NOMBRE NT$1 PYC ANIO PYC LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int autoresleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int autoresright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String autores = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int editorialleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int editorialright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String editorial = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_libro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr_libro ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Error en sintaxis de libro.",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_libro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
